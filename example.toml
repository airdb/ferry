[log]
level = 'info'
backups = 2
maxsize = 1073741824
localtime = true

[global]
max_idle_conns = 100
dial_timeout = 30
dns_ttl = 1800
prefer_ipv6 = false
dns_server = 'https://1.1.1.1/dns-query'

[upstream]
torsocks = {scheme='socks5h', host='127.0.0.1', port=9050}
proxy1_example_org = {scheme='https', username='user', password='password', host='proxy1.example.org', port=443}
proxy2_example_com = {scheme='https', username='foobar', password='123456', host='proxy2.example.com', port=443}

[[https]]
listen = [':443']
index_root = '/var/www/html'

[[https]]
listen = [':443']
server_name = ['example.org']
keyfile = 'example_org.pem'
index_root = '/var/www/example.org'
index_body = '''<html>
<head><title>Index of {{.Request.URL.Path}}</title></head>
<body>
<h1>Index of {{.Request.URL.Path}}</h1><hr><pre><a href="../">../</a>
{{range .FileInfos -}}
{{if .IsDir -}}
<a href="{{.Name}}/">{{.Name}}/</a>                                                  {{.ModTime.Format "02-Jan-2006 15:04"}}       -
{{else -}}
<a href="{{.Name}}">{{.Name}}</a>                                                  {{.ModTime.Format "02-Jan-2006 15:04"}}    {{.Size}}
{{end -}}
{{end}}</pre><hr></body>
</html>
{{tryfiles (print .StaticRoot "/autoindex.html") }}'''

[[https]]
listen = [':443']
server_name = ['ip.example.org']
keyfile = 'example_org.pem'
index_headers = 'content-type: application/json'
index_body = '{"ip":"{{host .Request.RemoteAddr}}","geo":"{{country .Request.RemoteAddr}}"}'

[[https]]
listen = [':443']
server_name = ['demo.example.org']
keyfile = '/path/to/demo.example.org.key'
certfile = '/path/to/fullchain.cer'
prefer_chacha20 = true
forward_policy = '''
	{{if regexMatch `^(153.3.130.101|153.3.130.102):` .Request.RemoteAddr}}
		bypass_auth
	{{else if contains " YaBrowser/" .Request.UserAgent}}
		bypass_auth
	{{else if contains "ip.phus.lu" .Request.Host}}
		allow_ip
	{{else if .Request.Header.Get "proxy-authorization"}}
		verify_auth
	{{else if all (.Request.ProtoAtLeast 2 0) (eq .Request.TLS.Version 0x0304) (greased .ClientHelloInfo)}}
		require_proxy_auth
	{{else if contains " Chrome/68.0.3440" .Request.UserAgent}}
		require_proxy_auth
	{{else}}
		proxy_pass
	{{end}}
'''
forward_auth = 'python auth.py {{.Request.Header.Get "proxy-authorization"}} {{.Request.RemoteAddr}}'
forward_upstream = '{{if hasSuffix ".onion" .Request.Host}}torsocks{{end}}'
forward_deny_domains = ['facebook.com', 'nytimes.com']
forward_speed_limit = 10_000_000
#forward_outbound_ip = '45.89.11.190'
pprof_enabled = true
pac_enabled = true
proxy_pass = 'http://127.0.0.1:80'

[[https]]
listen = [':443']
server_name = ['fly.example.org']
prefer_chacha20 = true
forward_policy = '''
    {{if regexMatch `^(git|curl|node|yarn|Go-http-client|Docker-Client|Homebrew)/` .Request.UserAgent}}
        bypass_auth
    {{else}}
        proxy_pass
    {{end}}
'''
forward_allow_domains = ['github.com']

[[http]]
listen = [':123']
server_name = ['127.0.0.1', '169.254.169.254']
forward_policy = '''
	{{if regexMatch `^192\.168\.` .Request.RemoteAddr}}
		bypass_auth
	{{else if regexMatch `\.google|ggpht\.com|gstatic\.com|github` .Request.Host}}
		bypass_auth
	{{else if contains " YaBrowser/" .Request.UserAgent}}
		bypass_auth
	{{else if contains "ip.phus.lu" .Request.Host}}
		allow_ip
	{{else if .Request.Header.Get "proxy-authorization"}}
		verify_auth
	{{else if hasPrefix "Mozilla/" .Request.UserAgent}}
		require_proxy_auth
	{{else}}
		bypass_auth
	{{end}}
'''
forward_auth = 'python auth.py {{.Request.Header.Get "proxy-authorization"}} {{.Request.RemoteAddr}}'
forward_upstream = '''
	{{if hasPrefix "scholar.google.com" .Request.Host}}
		proxy1_example_org
	{{else if ne (country .Request.Host) "CN"}}
		proxy2_example_com
	{{end}}
'''
pac_enabled = true
index_root = 'C:/Users/phuslu/Desktop'

[[socks]]
listen = ['127.0.0.1:1081']
forward_policy = '''
	{{if regexMatch `^(153.3.130.101|153.3.130.102):` .Request.RemoteAddr}}
		bypass_auth
	{{else if has (region .Request.RemoteAddr) (list "Jiangsu" "Zhejiang" "Shanghai")}}
		bypass_auth
	{{else if has (city .Request.RemoteAddr) (list "Nanjing" "Shanghai")}}
		bypass_auth
	{{else if eq .Request.Version 5}}
		require_auth
	{{else}}
		reject
	{{end}}
'''
forward_auth = 'python auth.py socks "{{.Request.Username}}" "{{.Request.Password}}" {{.Request.RemoteAddr}}'
forward_deny_domains = ['facebook.com', 'nytimes.com']

[[socks]]
listen = ['127.0.0.1:1082']
forward_policy = '''
	{{if eq (city .Request.RemoteAddr) "Nanjing"}}
		bypass_auth
	{{else if not .Request.Host}}
		bypass_auth
	{{else if regexMatch `^(149|91)\.` .Request.Host}}
		bypass_auth
	{{else}}
		reject
	{{end}}
'''

[[relay]]
listen = [':443']
relay_to = 'a-mtproxy.org:443'
forward_upstream = 'proxy1_example_org'

[[dns]]
listen = [':53']
upstream = ['114.114.114.114', 'https://doh.dns.apple.com/dns-query']
